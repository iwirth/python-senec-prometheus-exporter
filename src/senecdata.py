import http.client
import json
import struct

"""
{
  "ENERGY": {
    "STAT_STATE": "u8_0E", # IDK
    "GUI_BAT_DATA_POWER": "fl_4518C627", # power going in/out of battery (negative = out)
    "GUI_INVERTER_POWER": "fl_45D1D800", # generated by pv
    "GUI_HOUSE_POW": "fl_4438E8B0", # consumed by house
    "GUI_GRID_POW": "fl_C55CAFAE", # power going in/out of grid (negative = out)
    "GUI_BAT_DATA_FUEL_CHARGE": "fl_42A19DBC", # battery charge in %
    "GUI_CHARGING_INFO": "u8_01", # bool if battery is charging
    "GUI_BOOSTING_INFO": "u8_00" # IDK
  },
  "SYS_UPDATE": {
    "UPDATE_AVAILABLE": "u8_00"
  }
}
"""

class senecdata:
    def __init__(self, ip):
        self.ip = ip
        self.data = None

    def get_data(self):
        conn = http.client.HTTPConnection(self.ip)
        
        headersList = {
            "Accept": "*/*",
            "User-Agent": "Thunder Client (https://www.thunderclient.com)",
            "Content-Type": "application/json" 
        }

        payload = json.dumps({
            "ENERGY": {
            "STAT_STATE":"",
            "GUI_BAT_DATA_POWER":"",
            "GUI_INVERTER_POWER":"",
            "GUI_HOUSE_POW":"",
            "GUI_GRID_POW":"",
            "GUI_BAT_DATA_FUEL_CHARGE":"",
            "GUI_CHARGING_INFO":"",
            "GUI_BOOSTING_INFO":""
            },
        })

        conn.request("POST", "/lala.cgi", payload, headersList)
        response = conn.getresponse()
        result = response.read()

        self.data = json.loads(result.decode("utf-8"))
        return self.data

    def get_state(self):
        return self.hex2int(self.data["ENERGY"]["STAT_STATE"])
    
    def get_battery_power(self):
        return self.hex2float(self.data["ENERGY"]["GUI_BAT_DATA_POWER"])
    
    def get_inverter_power(self):
        return self.hex2float(self.data["ENERGY"]["GUI_INVERTER_POWER"])
    
    def get_house_power(self):
        return self.hex2float(self.data["ENERGY"]["GUI_HOUSE_POW"])
    
    def get_grid_power(self):
        return self.hex2float(self.data["ENERGY"]["GUI_GRID_POW"])
    
    def get_battery_charge(self):
        return self.hex2float(self.data["ENERGY"]["GUI_BAT_DATA_FUEL_CHARGE"])
    
    def get_charging_info(self):
        return self.hex2int(self.data["ENERGY"]["GUI_CHARGING_INFO"])
    
    def get_boosting_info(self):
        return self.hex2int(self.data["ENERGY"]["GUI_BOOSTING_INFO"])

    def hex2float(self,hex):
        val = str(hex).split('_')[1]
        return struct.unpack('!f', bytes.fromhex(val))[0]
    
    def hex2int(self, value):
        hex = str(value).split('_')[1]
        return int(hex, 16)
    
def main():
    senec = senecdata("192.168.178.166")

    senec.get_data()

    print('State: ' + str(senec.get_state()))
    print('batt-power: ' + str(senec.get_battery_power()))
    print('inverter-p: ' + str(senec.get_inverter_power()))
    print('house-power: ' + str(senec.get_house_power()))
    print('grid-power: ' + str(senec.get_grid_power()))
    print('batt-charge: ' + str(senec.get_battery_charge()))
    print('charg-info: ' + str(senec.get_charging_info()))
    print('boost-info: ' + str(senec.get_boosting_info()))

if __name__ == "__main__":
    main()